/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.*;
import javax.swing.*;
import queen.basis.*;

/**
 *
 * @author xkolac12 <xkolac12 at stud.fit.vutbr.cz>
 */
public class BattleGroundUI extends JPanel {
    
    private int dimension;
    private Desk battleground;
    private FieldButtonUI battlegroundUI[];
    
    /**
     * Creates new form BattleGroundUI
     */
    public BattleGroundUI() {
       super();       
       
       this.dimension = 8;
       this.battleground = new Desk(this.dimension);
       this.battlegroundUI = new FieldButtonUI[this.dimension * this.dimension];

       this.initBattleGround();
       this.syncBattleGround();
       
       this.setVisible(true);
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setBounds(50, 50, screenSize.width - 100, screenSize.height - 100);  
    }
    
    private void initBattleGround(){
        LayoutManager layout = new GridLayout(0, 9);

        this.setLayout(layout);
        this.setBackground(Color.WHITE);
        
        JLabel tempLabel;
        
        for(int row = this.dimension; row > 0; row--){
            // Add row labels
            tempLabel = new JLabel(Integer.toString(row), SwingConstants.CENTER);
            tempLabel.setFont(new Font("Serif", Font.PLAIN, 18));
            this.add(tempLabel);
            
            for(char column = 'a'; column < (char)('a' + this.dimension); column++){
                // Create fields
                int pos = this.battleground.pos(column, row);
                
                this.battlegroundUI[pos] = new FieldButtonUI(this.battleground.at(column, row));
                //this.fields[pos].setText(this.fields[pos].getField().getPosition().toString());
                this.add(this.battlegroundUI[pos]);
            }
        }
        
        // Blank label
        this.add(new JLabel());
        
        // Add column labels
        for(char column = 'A'; column < (char)('A' + this.dimension); column++){
            tempLabel = new JLabel(Character.toString(column), SwingConstants.CENTER); 
            tempLabel.setFont(new Font("Serif", Font.PLAIN, 18));
            this.add(tempLabel);
        }
    }
    
    
    
    private void syncBattleGround(){
        for(int row = this.dimension; row > 0; row--){
            for(char column = 'a'; column < (char)('a' + this.dimension); column++){
                
                
                
            }
        }
        
        //if(this.battleground){
            //for()
        //}
    }
    
    //public void paintComponent(Graphics graphics){
    //    graphics.setColor(Color.red);
    //    graphics.fillRect(0, 0, this.getWidth(), this.getHeight());
    //}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
